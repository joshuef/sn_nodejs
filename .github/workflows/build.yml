name: Build on tag

on:
  create:
    tags:
      - v*

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SAFE_CLI_VERSION: "0.11.0"
  SAFE_VAULT_VERSION: "0.23.0"
  ELECTRON_LATEST: "8.1.1"
  ELECTRON_ONE_BACK: "7.1.14"
  NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

jobs:
  builds:
    name: Build on tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ["10", "12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        # electron: ["7.1.14", "8.1.1"]
    steps:
      - name: Linux install jq
        run: sudo apt-get install jq
        if: matrix.os == 'ubuntu-latest'
     
      - name: Mac install jq
        run: brew install jq
        if: matrix.os == 'macos-latest'

      - name: Windows install jq
        run: choco install jq
        if: matrix.os == 'windows-latest'

      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Yarn Install
        run: | 
          yarn
          yarn global add neon-cli
      - name: set package version as env
        run: echo ::set-env name=PACKAGE_VERSION::$(jq .version ./package.json)
      
      - name: Build for node ${{ matrix.node }}
        run: |
          yarn package
          yarn publish-gh-draft
      - run: ls build
      - run: ls build/Release || true
      - run: ls build/stage || true

      - name: Archive Node Build
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}-${{ matrix.node }}
          path: ./build/Release/index.node

      - name: Build Electron Latest
        if: matrix.node == '12'
        env:
        run: |
            rm -rf build || true
            yarn cross-env npm_config_target=${{ env.ELECTRON_LATEST }} npm_config_arch=x64 npm_config_disturl=https://electronjs.org/headers npm_config_runtime=electron neon build --release
            rm -rf native/target
            yarn node-pre-gyp package --runtime=electron --target=${{ env.ELECTRON_LATEST }} --dist-url=https://electronjs.org/headers
            yarn publish-gh-draft || exit 0
      - run: ls build || true
      - run: ls build/Release || true
      - run: ls build/stage || true
      
      - name: Build Electron Latest -1 
        if: matrix.node == '12'          
        run: |
            rm -rf build || true
            yarn cross-env npm_config_target=${{ env.ELECTRON_ONE_BACK }} npm_config_arch=x64 npm_config_disturl=https://electronjs.org/headers npm_config_runtime=electron neon build --release
            rm -rf native/target
            yarn node-pre-gyp package --runtime=electron --target=${{ env.ELECTRON_ONE_BACK }} --dist-url=https://electronjs.org/headers
            yarn publish-gh-draft || exit 0
      - run: ls build || true
      - run: ls build/Release || true
      - run: ls build/stage || true

      - name: Set tag as env
        if: matrix.os == 'ubuntu-latest'
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})

      - name: lets check tag
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: echo ${{ env.RELEASE_VERSION }}

      - name: Generate Changelog
        shell: bash
        if: matrix.os == 'ubuntu-latest'
        run: awk '/^## /{c++;p=1;next} p;{if(c==2){exit}}' CHANGELOG.md > ${{ github.workflow }}-CHANGELOG.txt

      - name: Release generation
        if: matrix.os == 'ubuntu-latest'
        uses: Xotl/cool-github-releases@ef50014218e6139d534f725f69aabe3728ea9b2e
        with:
          mode: update
          body_mrkdwn: cat ${{ github.workflow }}-CHANGELOG.txt
          isPrerelease: contains(github.ref, "alpha") || contains(github.ref, "beta")
          # assets: ${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.dmg;${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-linux-x64.AppImage|application/vnd.appimage;${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-win-x64.exe;
          github_token: ${{ github.token }}
          tag_name: ${{ env.RELEASE_VERSION }}
